@page "/recipedetails/{id}"

<PageTitle>Recipe Details Page</PageTitle>

@using RecipeApp.Data

@if (recipe == null)
{
    <h1>WAITING</h1>
} else {

<h1>Recipe Details for @recipe.title</h1>

<p>Ready in @recipe.readyInMinutes</p>
<br>

<p>Short Description: @recipe.summary </p>
<p></p>
<br>

<p>List of Ingredients: </p>
<ul>
           @foreach (var item in recipe.extendedIngredients) {

    <li>@item.name
        <p>
            @item.amount @item.unit
        </p>
    </li>
    }
</ul>
<br>

<p>Steps: @recipe.instructions </p>

<br>

<img src="@recipe.image" alt="pic of food">

<button>Add to meal plan +</button>
}
@code {
  @* DotEnv.Load(); *@
      <!-- List<Recipe> Recipes = new List<Recipe>();
      protected override async Task OnInitializedAsync() -->
    <!-- {
        await RefreshRecipes();
    }

    private async Task RefreshRecipes()
    {
        Recipes = await service.GetRecipeAsync();
    }

    public Recipe NewRecipe { get; set; } = new Recipe();
    private async Task AddNewRecipe()
    {
        await service.AddRecipeAsync(NewRecipe);
        NewRecipe = new Recipe();
        await RefreshRecipes();
    }

    Recipe UpdateRecipe = new Recipe();
    private void SetRecipeForUpdate(Recipe Recipe)
    {
        UpdateRecipe = Recipe;
    }

    private async Task UpdateRecipeData()
    {
        await service.UpdateRecipeAsync(UpdateRecipe);
        await RefreshRecipes();
    }

    private async Task DeleteRecipe(Recipe Recipe)
    {
        await service.DeleteRecipeAsync(Recipe);
        await RefreshRecipes();
    }  -->


Recipe? recipe;

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string URL = $"{GlobalVariable.BaseUrl}{Id}/information?apiKey=2d565ece4cab48459669cb81a708e639&includeNutrition=false";
        recipe = await httpClient.GetFromJsonAsync<Recipe>(URL);

    }
}
